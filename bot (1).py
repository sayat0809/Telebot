from telegram.constants import ChatMemberStatus
from telegram import (
    Update,
    ChatPermissions,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler
)
from dotenv import load_dotenv
import os
import time
import hashlib
import random
import re
import asyncio
from datetime import datetime, timedelta
import telegram

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º—É—Ç–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
muted_users = {}  # {user_id: timestamp}
user_balances = {}  # {user_id: coins}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
last_transfer_time = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
transferred_amount = {}
# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
last_bonus_time = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∫–ª—é—á ‚Äî ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ)
user_referrals = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_invites = {}

load_dotenv

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
user_referrals = {}  # {ref_code: inviter_id}
user_invites = {}  # {inviter_id: [user_id1, user_id2, ...]}

ADMIN_ID = 8161445285

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–æ–≤
block_list = {}

unlimited_users = set()     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
admin_id = 8161445285       # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

user_bets = {}
user_can_bet = set()
user_spinning = set()
user_bet_messages = {}
group_roulette_log = {}
private_roulette_log = {}
active_group_roulette = {}
rules_message_id = {}

TOP_UP_LINK = "https://t.me/Royalsbaatlle"
DELAY_BEFORE_SPIN = [3, 5]
GIF_DURATION = 5
RESULT_DELAY = 2
MIN_BET = 1000
ROULETTE_GIFS = [
    "https://i.gifer.com/77rN.gif",
    "https://i.gifer.com/8Emn.gif"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
SYMBOLS = {"üíé": 2, "‚ô•Ô∏è": 10, "‚ô†Ô∏è": 10, "üÄÑÔ∏è": 10}
WIN_MULTIPLIERS = {"üíé": (5, 10), "‚ô•Ô∏è": (3, 4), "‚ô†Ô∏è": (3, 4), "üÄÑÔ∏è": (4, 5)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
cooldowns = {}  # {chat_id: end_time}
active_games = set()  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int,
                             context: ContextTypes.DEFAULT_TYPE) -> bool:
    CHANNEL_ID = "@CrystalDnewss"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    args = context.args

    # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_/balances:
        user_balances[user_id] = 5000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if args and args[0].startswith("ref_"):
        ref_code = args[0][4:]  # –£–±–∏—Ä–∞–µ–º "ref_"
        inviter_id = user_referrals.get(ref_code)

        if inviter_id and inviter_id != user_id:
            user_invites.setdefault(inviter_id, []).append(user_id)
            inviter_name = await get_username(inviter_id, context)

            await update.message.reply_text(
                f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {inviter_name}.\n\n"
                f"–¢–µ–ø–µ—Ä—å {inviter_name} –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫—ç—à–±–µ–∫ 10% "
                f"—Å –ª—é–±–æ–π –≤–∞—à–µ–π –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç –æ—Ç 200K –¥–æ–Ω–∞—Ç."
            )
        else:
            await update.message.reply_text("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @CrystalDnobot\n"
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π, –≤–µ—Å–µ–ª—å–µ–º –∏ –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.\n\n")

    keyboard = [
        [KeyboardButton("üìã–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîó–†–µ—Ñ–µ—Ä–∞–ª—ã")],
        [KeyboardButton("üåê–°—Å—ã–ª–∫–∏"), KeyboardButton("üõí–ú–∞–≥–∞–∑–∏–Ω")],
        [
            KeyboardButton("üé≠–°—Ç–∏–∫–µ—Ä—ã"),
            KeyboardButton("üéÅ–ü—Ä–æ–º–æ–∫–æ–¥—ã"),
            KeyboardButton("üí≥–î–æ–Ω–∞—Ç"),
        ],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


async def transfer_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in user_balances:
        user_balances[user_id] = 5000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π

    if user_id not in last_transfer_time:
        last_transfer_time[user_id] = 0

    if user_id not in transferred_amount:
        transferred_amount[user_id] = 0

    if text.startswith("+"):
        try:
            amount = int(text[1:])
            if amount <= 0:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return

            target_user = None
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user.id
                if target_user == user_id or target_user == context.bot.id:
                    await update.message.reply_text("–ì–µ–Ω–∏–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ—Ç.")
                    return

            current_time = time.time()
            
            # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∏–º–∏—Ç–∞–º–∏
            if user_id not in unlimited_users:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                time_since_last_transfer = current_time - last_transfer_time[user_id]
                if time_since_last_transfer < 59:
                    remaining_time = int(59 - time_since_last_transfer)
                    minutes = remaining_time // 60
                    seconds = remaining_time % 60
                    await update.message.reply_text(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç—ã –µ—â—ë {minutes:02}:{seconds:02}")
                    return

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
                if time_since_last_transfer >= 12 * 3600:
                    transferred_amount[user_id] = 0

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                if transferred_amount[user_id] + amount > 10000:
                    remaining_limit = 10000 - transferred_amount[user_id]
                    keyboard = [[InlineKeyboardButton("–°–Ω—è—Ç—å –ª–∏–º–∏—Ç", url="https://t.me/CrystalDnewss")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"–õ–∏–º–∏—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É 10000 –º–æ–Ω–µ—Ç –∑–∞ 12 —á–∞—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –µ—â—ë: {remaining_limit}ü™ô",
                        reply_markup=reply_markup,
                    )
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if user_balances[user_id] < amount:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if target_user not in user_balances:
                user_balances[target_user] = 5000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

            # –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            user_balances[user_id] -= amount
            user_balances[target_user] += amount

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∏–º–∏—Ç–∞–º–∏
            if user_id not in unlimited_users:
                last_transfer_time[user_id] = current_time
                transferred_amount[user_id] += amount

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            user_name = update.message.from_user.first_name
            target_name = update.message.reply_to_message.from_user.first_name
            user_link = f"[{user_name}](tg://user?id={user_id})"
            target_link = f"[{target_name}](tg://user?id={target_user})"

            await update.message.reply_text(
                f"{user_link} –ø–µ—Ä–µ–≤—ë–ª {amount}ü™ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_link}",
                parse_mode="Markdown",
            )

        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

async def crystal_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–æ–≤"""
    if update.message.from_user.id != admin_id:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    context.user_data['awaiting_user_id'] = True
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç—ã:")

async def handle_user_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.user_data.get('awaiting_user_id'):
        return
    
    if update.message.from_user.id != admin_id:
        return
    
    try:
        target_id = int(update.message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–Ω—è—Ç—ã –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç—ã —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_id in unlimited_users:
            await update.message.reply_text(
                f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–∂–µ —Å–Ω—è—Ç—ã –ª–∏–º–∏—Ç—ã.\n"
                "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            )
            context.user_data['awaiting_user_id'] = False
            return
            
        unlimited_users.add(target_id)
        context.user_data['awaiting_user_id'] = False
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã!")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text="–í–∞–º —Å–Ω—è–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã!\n\n"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –õ–∏–º–∏—Ç—ã —Å–Ω—è—Ç—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ."
            )
            
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")

async def referrals_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invited_users = user_invites.get(user_id, [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n/referal ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏\n\n"

    if invited_users:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_list = "\n".join(
            [
                f"{i + 1}. {await get_username(uid, context)}"
                for i, uid in enumerate(invited_users)
            ]
        )
        message += referral_list
    else:
        # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        message, parse_mode="Markdown", disable_web_page_preview=True
    )


def get_random_symbols():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–≥—Ä—ã."""
    return random.choices(list(SYMBOLS.keys()), weights=SYMBOLS.values(), k=4)


async def play_bandit(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ (—Ä–∞–∑–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    key = (chat_id, user_id)
    if key in cooldowns and datetime.now() < cooldowns[key]:
        remaining = (cooldowns[key] - datetime.now()).seconds
        await update.message.reply_text(f"")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä 12 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cooldowns[key] = datetime.now() + timedelta(seconds=12)

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏
    try:
        bet = int(context.matches[0].group(
            1)) if context.matches and context.matches[0].group(1) else 1000
    except BaseException:
        bet = 1000

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã)
    asyncio.create_task(spin_slots(update, context, chat_id, user_id, bet))


    await msg.edit_text(result_text, parse_mode="Markdown")

async def spin_slots(update: Update, context: CallbackContext, chat_id, user_id, bet):
    """–õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –¥–∞–µ–º 5000 –º–æ–Ω–µ—Ç
    user_balance = user_balances.get(user_id, 5000)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if bet > user_balance:
        await context.bot.send_message(chat_id, f"[{user.first_name}](tg://user?id={user_id}), –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", parse_mode="Markdown")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    user_balances[user_id] = user_balance - bet

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    symbols = get_random_symbols()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    user_link = f"[{user.first_name}](tg://user?id={user_id})"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    msg = await context.bot.send_message(chat_id, f"{user_link}\n\nüå´|üå´|üå´|üå´", parse_mode="Markdown")

    for i in range(4):
        await asyncio.sleep(2.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤—Ä–∞—â–µ–Ω–∏—è–º–∏
        display = "|".join(symbols[:i + 1] + ["üå´"] * (3 - i))
        await msg.edit_text(f"{user_link}\n\n{display}", parse_mode="Markdown")

    # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    winnings = 0
    for symbol, (x3, x4) in WIN_MULTIPLIERS.items():
        count = symbols.count(symbol)
        if count == 4:
            winnings = bet * x4
        elif count == 3:
            winnings = bet * x3  # –¢–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ–º 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    user_balances[user_id] += winnings

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_text = f"{user_link}\n\n"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç—Å—Ç—É–ø–æ–º
    result_text += f"{'|'.join(symbols)}\n\n"  # –°–∏–º–≤–æ–ª—ã —Å –æ—Ç—Å—Ç—É–ø–æ–º
    result_text += f"–í—ã–∏–≥—Ä—ã—à {winnings} ü™ô" if winnings else f"–ü—Ä–æ–∏–≥—Ä—ã—à {bet} ü™ô"

    await msg.edit_text(result_text, parse_mode="Markdown")

async def balance(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    balance = user_balances.get(user_id, 100000)
    user_name = update.message.from_user.first_name

    bet_info = user_bets.get((user_id, chat_id), {})
    total_bet = sum(bet_info.values())
    bet_text = f" +{total_bet}" if total_bet > 0 else ""

    message = f"{user_name}\n–ú–æ–Ω–µ—Ç—ã: {balance}{bet_text}"

    if balance == 0:
        keyboard = [[InlineKeyboardButton(" –ë–æ–Ω—É—Å", callback_data="bonus_request")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–æ–Ω—É—Å"


async def handle_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_name = query.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    if user_id in last_bonus_time:
        current_time = time.time()
        time_since_last_bonus = current_time - last_bonus_time[user_id]

        current_time = time.time()
        time_since_last_bonus = current_time - last_bonus_time[user_id]
        if time_since_last_bonus < 11 * 3600:  # 11 —á–∞—Å–æ–≤
            remaining_time = int(11 * 3600 - time_since_last_bonus)
            hours = remaining_time // 3600
            minutes = (remaining_time % 3600) // 60
            await query.edit_message_text(
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
            )
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if not await check_subscription(user_id, context):
        keyboard = [[InlineKeyboardButton(
            "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_bonus")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª @CrystalDnewss",
            reply_markup=reply_markup,
        )
        return

    # –í—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–∞
    user_balances[user_id] += 2500
    last_bonus_time[user_id] = time.time()
    await query.edit_message_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å 2500 –º–æ–Ω–µ—Ç")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"


async def get_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if not await check_subscription(user_id, context):
        await query.edit_message_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª @CrystalDnewss")
        return

    # –í—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–∞
    user_balances[user_id] += 2500
    last_bonus_time[user_id] = time.time()
    await query.edit_message_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å 2500 –º–æ–Ω–µ—Ç")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = int(query.data.split("_")[1])
    user_name = context.bot.get_chat(user_id).first_name
    balance = user_balances.get(user_id, 5000)

    await query.edit_message_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n–ú–æ–Ω–µ—Ç—ã: {balance}ü™ô"
    )





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def get_username(user_id, context):
    user = await context.bot.get_chat(user_id)
    return user.full_name if user.username is None else f"@{user.username}"


# –ö–æ–º–∞–Ω–¥–∞ /referal ‚Äî –≤—ã–¥–∞—ë—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É


async def get_referral_link(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    ref_code = hashlib.md5(str(user_id).encode()).hexdigest()[
        :16
    ]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    referral_link = f"https://t.me/CrystalGnoBot?start=ref_{ref_code}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    user_referrals[ref_code] = user_id

    await update.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π /Crystal_Money —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫—ç—à–±–µ–∫–æ–º


async def crystal_money(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    context.user_data["waiting_for_id"] = True


async def handle_user_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_id"):
        try:
            target_id = int(update.message.text)
            context.user_data["target_id"] = target_id
            context.user_data["waiting_for_id"] = False
            context.user_data["waiting_for_amount"] = True
            await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    elif context.user_data.get("waiting_for_amount"):
        try:
            amount = int(update.message.text)
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return

            target_id = context.user_data["target_id"]
            if target_id not in user_balances:
                user_balances[target_id] = 5000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
            user_balances[target_id] += amount
            context.user_data["waiting_for_amount"] = False
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message_text = (
                f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount}ü™ô\n\n"
                "–ü–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ—Ä–¥ –¥–Ω—è –≤ @CrystalDnobot –∏ –∑–∞–±–µ—Ä–∏ –ø—Ä–∏–∑! "
                "–î–æ–∫–∞–∂–∏ —Å–≤–æ—ë –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º."
            )

            photo_url = (
                "https://i.postimg.cc/zGpBX53X/file-8-Ai-ZPmh-MAo6v3-Xz-M79-Wu-HT.webp"
            )

            try:
                await context.bot.send_photo(
                    target_id, photo=photo_url, caption=message_text
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await context.bot.send_message(target_id, text=message_text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—ç—à–±—ç–∫–∞
            for inviter_id, referrals in user_invites.items():
                if target_id in referrals and amount >= 200000:
                    cashback = int(amount * 0.10)  # 10% –æ—Ç —Å—É–º–º—ã
                    user_balances[inviter_id] = (
                        user_balances.get(inviter_id, 5000) + cashback
                    )

                    inviter_name = await get_username(inviter_id, context)

                    cashback_message = (
                        f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {cashback}ü™ô –∑–∞ –ø–æ–∫—É–ø–∫—É –º–æ–Ω–µ—Ç –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {await get_username(target_id, context)}\n\n"
                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∫–æ—Ä–¥ –¥–Ω—è –≤ @CrystalDnobot –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –ø—Ä–∏–∑! "
                        "–ü–æ–∫–∞–∂–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Å—Ç–∞–Ω—å—Ç–µ —á–µ–º–ø–∏–æ–Ω–æ–º."
                    )

                    try:
                        await context.bot.send_photo(
                            inviter_id, photo=photo_url, caption=cashback_message
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        await context.bot.send_message(
                            inviter_id, text=cashback_message
                        )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
async def is_user_admin(
    chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE
) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


# –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_admin = await is_user_admin(chat_id, user_id, context)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –º—É—Ç–∞
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
    else:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—Ç–∏—Ç—å –±–æ—Ç–∞
    if target_id == context.bot.id:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —Ü–µ–ª—å ‚Äî –±–æ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞
    if not is_admin and await is_user_admin(chat_id, target_id, context):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ
    if target_id in muted_users and datetime.now() < muted_users[target_id]:
        target_link = f"[{target_user.first_name}](tg://user?id={target_id})"
        await update.message.reply_text(
            f"{target_link} —É–∂–µ –≤ –º—É—Ç–µ", parse_mode="Markdown"
        )
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_admin:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user_balances.get(user_id, 0) < 300:
            await update.message.reply_text(" –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –º—É—Ç–∞.")
            return

        # –°–Ω–∏–º–∞–µ–º 300 –º–æ–Ω–µ—Ç
        user_balances[user_id] -= 300

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        mute_duration = timedelta(minutes=1)
        mute_until = datetime.now() + mute_duration

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
        muted_users[target_id] = mute_until

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=mute_until,
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_link = f"[{target_user.first_name}](tg://user?id={target_id})"
        mute_message = f"{target_link} –∑–∞—Ç–∏—Ö–Ω–µ—Ç –Ω–∞ 0—á 1–º, –º–æ–∂–µ—Ç–µ –≤—ã–ø–ª–µ—Å–Ω—É—Ç—å —Å–≤–æ–π –≥–Ω–µ–≤! üëâ [–¢—É—Ç](https://t.me/Demorgan_CRYSTAL)"
        await update.message.reply_text(mute_message, parse_mode="Markdown")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        if len(text.split()) == 1:  # –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            mute_duration = timedelta(minutes=1)
        else:
            try:
                mute_time = int(text.split()[1])  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                if mute_time <= 0:
                    return
                mute_duration = timedelta(minutes=mute_time)
            except (IndexError, ValueError):
                return

        mute_until = datetime.now() + mute_duration

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
        muted_users[target_id] = mute_until

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=mute_until,
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_link = f"[{target_user.first_name}](tg://user?id={target_id})"
        mute_message = f"{target_link} –∑–∞—Ç–∏—Ö–Ω–µ—Ç –¥–æ {
            mute_until.strftime('%d.%m.%Y %H:%M:%S')}"

        await update.message.reply_text(mute_message, parse_mode="Markdown")


# –°–Ω—è—Ç–∏–µ –º—É—Ç–∞


async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    chat_member = await context.bot.get_chat_member(chat.id, user.id)
    if chat_member.status not in ["administrator", "creator"]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        return

    muted_user = update.message.reply_to_message.from_user

    # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    await context.bot.restrict_chat_member(
        chat.id, muted_user.id, permissions=ChatPermissions(
            can_send_messages=True)
    )

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö
    if muted_user.id in muted_users:
        del muted_users[muted_user.id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_link = f"[{muted_user.first_name}](tg://user?id={muted_user.id})"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    await update.message.reply_text(
        f" {user_link} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è


async def check_mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in muted_users:
        if datetime.now() < muted_users[user_id]:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–º—å—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await update.message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {
                    update.message.from_user.first_name} –∑–∞–º—å—é—á–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å.",
            )
        else:
            # –£–¥–∞–ª—è–µ–º –º—É—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
            del muted_users[user_id]


async def bot_stop(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã !–±–æ—Ç —Å—Ç–æ–ø."""
    if update.message.reply_to_message:
        user_id = update.message.from_user.id
        target_id = update.message.reply_to_message.from_user.id
        user_name = update.message.from_user.first_name
        target_name = update.message.reply_to_message.from_user.first_name

        user_link = f"[{user_name}](tg://user?id={user_id})"
        target_link = f"[{target_name}](tg://user?id={target_id})"

        if user_id not in block_list:
            block_list[user_id] = set()

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —Å–Ω–∏–º–∞–µ–º –µ—ë
        if target_id in block_list[user_id]:
            block_list[user_id].remove(target_id)
            await update.message.reply_text(
                f"{user_link} —Ä–∞–∑—Ä–µ—à–∏–ª {target_link} –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="Markdown",
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            block_list[user_id].add(target_id)

            block_list[user_id].add(target_id)
            await update.message.reply_text(
                f"{user_link} –∑–∞–ø—Ä–µ—Ç–∏–ª {target_link} –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="Markdown",
            )
    else:
        await update.message.reply_text(
            "–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –≤–∞–º."
        )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É


async def check_messages(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ."""
    user_id = update.message.from_user.id
    reply_to = (
        update.message.reply_to_message.from_user.id
        if update.message.reply_to_message
        else None
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–º—É, –∫—Ç–æ –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª
    if reply_to and reply_to in block_list and user_id in block_list[reply_to]:
        try:
            await update.message.delete()
            return
        except TelegramError:
            pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = await is_user_admin(chat_id, user_id, context)
    if not is_admin:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å."
        )
        return

    target_user = update.message.reply_to_message.from_user
    target_id = target_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–Ω–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤)
    if await is_user_admin(chat_id, target_id, context):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞
    await context.bot.ban_chat_member(chat_id, target_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    target_link = f"[{target_user.first_name}](tg://user?id={target_id})"
    ban_message = f"üö´ {target_link} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞."

    await update.message.reply_text(ban_message, parse_mode="Markdown")


# –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def kick_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user = update.message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    chat_member = await context.bot.get_chat_member(chat_id, user.id)
    if chat_member.status not in [
        ChatMemberStatus.ADMINISTRATOR,
        ChatMemberStatus.OWNER,
    ]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∏–∫–∞–µ–º
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    else:
        await update.message.reply_text(
            "‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    target_chat_member = await context.bot.get_chat_member(chat_id, target_user.id)
    if target_chat_member.status in [
        ChatMemberStatus.ADMINISTRATOR,
        ChatMemberStatus.OWNER,
    ]:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.ban_chat_member(chat_id, target_user.id)
        # –†–∞–∑–±–∞–Ω (—á—Ç–æ–±—ã –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è)
        await context.bot.unban_chat_member(chat_id, target_user.id)
        mention = f"[{target_user.first_name}](tg://user?id={target_user.id})"
        await update.message.reply_text(
            f"{mention} –∏—Å—á–µ–∑... –ø—Ä–æ–ø–∞–ª... üí®", parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏


async def roulette(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name

    if chat_id in active_group_roulette:
        await context.bot.send_message(
            chat_id=chat_id, text=f"–†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É."
        )
        return

    active_group_roulette[chat_id] = True
    await show_roulette_rules(update, context)


# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ä—É–ª–µ—Ç–∫–∏


async def show_roulette_rules(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("1-3", callback_data="1-3"),
            InlineKeyboardButton("4-6", callback_data="4-6"),
            InlineKeyboardButton("7-9", callback_data="7-9"),
            InlineKeyboardButton("10-12", callback_data="10-12"),
        ],
        [
            InlineKeyboardButton("1–∫ –Ω–∞ üî¥", callback_data="red"),
            InlineKeyboardButton("1–∫ –Ω–∞ ‚ö´Ô∏è", callback_data="black"),
            InlineKeyboardButton("1–∫ –Ω–∞ üü¢", callback_data="green"),
        ],
        [
            InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat"),
            InlineKeyboardButton("–£–¥–≤–æ–∏—Ç—å", callback_data="double"),
            InlineKeyboardButton("–ö—Ä—É—Ç–∏—Ç—å", callback_data="spin"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    rules_message = await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=(
            "–ú–∏–Ω–∏—Ä—É–ª–µ—Ç–∫–∞ –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∏–∑:\n"
            "0üü¢\n"
            "1üî¥ 2‚ö´Ô∏è 3üî¥ 4‚ö´Ô∏è 5üî¥ 6‚ö´Ô∏è\n"
            "7üî¥ 8‚ö´Ô∏è 9üî¥10‚ö´Ô∏è11üî¥12‚ö´Ô∏è\n"
            "–°—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "10 –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ | 5 –Ω–∞ 12\n"
        ),
        reply_markup=reply_markup,
    )
    rules_message_id[update.message.chat_id] = rules_message.message_id


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫


async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    user_name = query.from_user.first_name
    data = query.data

    if chat_id not in active_group_roulette:
        await query.answer("–†—É–ª–µ—Ç–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ '—Ä—É–ª–µ—Ç–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    user_balances.setdefault(user_id, 100000)

    if data in ["1-3", "4-6", "7-9", "10-12"]:
        amount = 1000
        if user_balances[user_id] < amount:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        bets[data] = bets.get(data, 0) + amount
        user_balances[user_id] -= amount

        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {data}",
            parse_mode="Markdown",
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(
            bet_message.message_id
        )
        await query.answer()

    elif data in ["red", "black", "green"]:
        amount = 1000
        if user_balances[user_id] < amount:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        color = "–∫—Ä–∞—Å–Ω–æ–µ" if data == "red" else (
            "—á—ë—Ä–Ω–æ–µ" if data == "black" else "0")
        bets[color] = bets.get(color, 0) + amount
        user_balances[user_id] -= amount

        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {color}",
            parse_mode="Markdown",
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(
            bet_message.message_id
        )
        await query.answer()

    elif data == "repeat":
        await context.bot.send_message(
            chat_id=chat_id, text="–ö–æ–º–∞–Ω–¥–∞ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        await query.answer()

    elif data == "double":
        bets = user_bets.get((user_id, chat_id), {})
        if not bets:
            await query.answer("–ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è")
            return

        total_bet = sum(bets.values())
        if user_balances[user_id] < total_bet:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!")
            return

        for bet in bets:
            bets[bet] *= 2
        user_balances[user_id] -= total_bet

        bet_text = "\n".join(
            [f"{amount} –Ω–∞ {bet}" for bet, amount in bets.items()])
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"[{user_name}](tg://user?id={user_id}) —É–¥–≤–æ–∏–ª(–∞) —Å—Ç–∞–≤–∫–∏:\n{bet_text}",
            parse_mode="Markdown",
        )
        await query.answer()

    elif data == "spin":
        if (user_id, chat_id) not in user_bets or not user_bets[(
                user_id, chat_id)]:
            await query.answer()
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"[{user_name}](tg://user?id={user_id}), —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É.",
                parse_mode="Markdown",
            )
            return

        user_spinning.add((user_id, chat_id))
        await query.answer()

        if chat_id in rules_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id, message_id=rules_message_id[chat_id]
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            del rules_message_id[chat_id]

        for bet_user_id, bet_chat_id in list(user_bet_messages.keys()):
            if bet_chat_id == chat_id:
                for message_id in user_bet_messages[(
                        bet_user_id, bet_chat_id)]:
                    try:
                        await context.bot.delete_message(
                            chat_id=chat_id, message_id=message_id
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞–≤–∫–µ: {e}")
                del user_bet_messages[(bet_user_id, bet_chat_id)]


async def spin_roulette_task(user_id, chat_id, user_name, context, update):
    result_text = ""

    if chat_id == user_id:
        delay = random.choice([3, 5, 10])
    else:
        delay = random.choice([5, 10, 15])

    spin_message = await context.bot.send_message(
        chat_id=chat_id,
        text=f"[{user_name}](tg://user?id={user_id}) –∫—Ä—É—Ç–∏—Ç (—á–µ—Ä–µ–∑ {delay} —Å–µ–∫)",
        parse_mode='Markdown'
    )
    await asyncio.sleep(delay)

    await context.bot.delete_message(chat_id=chat_id, message_id=spin_message.message_id)

    gif_url = random.choice(ROULETTE_GIFS)
    gif_message = await context.bot.send_animation(chat_id=chat_id, animation=gif_url)
    await asyncio.sleep(GIF_DURATION)

    await context.bot.delete_message(chat_id=chat_id, message_id=gif_message.message_id)

    result_number = random.randint(0, 12)
    result_color = "üü¢" if result_number == 0 else ("üî¥" if result_number % 2 != 0 else "‚ö´Ô∏è")

    result_text = f"–†—É–ª–µ—Ç–∫–∞: {result_number}{result_color}\n"

    for (bet_user_id, bet_chat_id), bets in user_bets.items():
        if bet_chat_id == chat_id:
            try:
                user = await context.bot.get_chat(bet_user_id)
                user_name = user.first_name

                sorted_bets = sorted(bets.items(), key=lambda x: (
                    0 if isinstance(x[0], int) else (1 if "-" in str(x[0]) else 2),
                    x[0] if isinstance(x[0], int) else 0
                ))

                for bet, amount in sorted_bets:
                    if bet == 0 or bet == "0":
                        bet = "–∑–µ—Ä–æ"
                    elif bet == "üî¥":
                        bet = "–∫—Ä–∞—Å–Ω–æ–µ"
                    elif bet == "‚ö´Ô∏è":
                        bet = "—á—ë—Ä–Ω–æ–µ"
                    elif bet == "üü¢":
                        bet = "–∑–µ–ª—ë–Ω–æ–µ"
                    result_text += f"{user_name} {amount} –Ω–∞ {bet}\n"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

    for (bet_user_id, bet_chat_id), bets in user_bets.items():
        if bet_chat_id == chat_id:
            try:
                user = await context.bot.get_chat(bet_user_id)
                user_name = user.first_name
                total_win = 0

                sorted_bets = sorted(bets.items(), key=lambda x: (
                    0 if isinstance(x[0], int) else (1 if "-" in str(x[0]) else 2),
                    x[0] if isinstance(x[0], int) else 0
                ))

                for bet, amount in sorted_bets:
                    if isinstance(bet, int):
                        if bet == result_number:
                            win = amount * 12
                            total_win += int(win)
                            if result_number == 0:
                                result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤—ã–∏–≥—Ä–∞–ª {int(win)} –Ω–∞ –∑–µ—Ä–æ\n"
                            else:
                                result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤—ã–∏–≥—Ä–∞–ª {int(win)} –Ω–∞ {bet}\n"
                        elif result_number == 0:
                            return_amount = int(amount // 2)
                            user_balances[bet_user_id] += return_amount
                            result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤–æ–∑–≤—Ä–∞—Ç {return_amount} –Ω–∞ {bet}\n"
                    elif bet in ["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ"]:
                        if (bet == "–∫—Ä–∞—Å–Ω–æ–µ" and result_color == "üî¥") or (bet == "—á—ë—Ä–Ω–æ–µ" and result_color == "‚ö´Ô∏è"):
                            win = amount * 2
                            total_win += int(win)
                            result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤—ã–∏–≥—Ä–∞–ª {int(win)} –Ω–∞ {bet}\n"
                    elif bet == "0":
                        if result_number == 0:
                            win = amount * 12
                            total_win += int(win)
                            result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤—ã–∏–≥—Ä–∞–ª {int(win)} –Ω–∞ –∑–µ—Ä–æ\n"
                    elif "-" in bet:
                        start, end = map(int, bet.split("-"))
                        if start <= result_number <= end:
                            multiplier = 12 / (end - start + 1)
                            win = amount * multiplier
                            total_win += int(win)
                            result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤—ã–∏–≥—Ä–∞–ª {int(win)} –Ω–∞ {bet}\n"
                        elif result_number == 0:
                            return_amount = int(amount // 2)
                            user_balances[bet_user_id] += return_amount
                            result_text += f"[{user_name}](tg://user?id={bet_user_id}) –≤–æ–∑–≤—Ä–∞—Ç {return_amount} –Ω–∞ {bet}\n"

                user_balances[bet_user_id] += total_win
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–æ–∫: {e}")

    await context.bot.send_message(
        chat_id=chat_id,
        text=result_text,
        parse_mode='Markdown'
    )

    log_entry = f"–†—É–ª–µ—Ç–∫–∞: {result_number}{result_color}"
    if chat_id == user_id:
        if user_id not in private_roulette_log:
            private_roulette_log[user_id] = []
        private_roulette_log[user_id].append(log_entry)
    else:
        if chat_id not in group_roulette_log:
            group_roulette_log[chat_id] = []
        group_roulette_log[chat_id].append(log_entry)

    for (bet_user_id, bet_chat_id) in list(user_bets.keys()):
        if bet_chat_id == chat_id:
            del user_bets[(bet_user_id, bet_chat_id)]

    user_spinning.remove((user_id, chat_id))

    if chat_id == user_id:
        if chat_id in active_group_roulette:
            del active_group_roulette[chat_id]

        await context.bot.send_message(
            chat_id=chat_id,
        )
    else:
        active_group_roulette[chat_id] = True
        await show_roulette_rules(update, context)

async def show_log(update: Update, context: CallbackContext):
    user_id=update.message.from_user.id
    chat_id=update.message.chat_id
    user_name=update.message.from_user.first_name

    command=update.message.text.strip().lower()

    if command in ["–ª–æ–≥", "–ª–æ–≥–∏"]:
        log_limit=11
    elif command in ["!–ª–æ–≥", "!–ª–æ–≥–∏"]:
        log_limit=21
    else:
        await context.bot.send_message(
            chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ª–æ–≥' –∏–ª–∏ '!–ª–æ–≥'."
        )
        return

    if chat_id == user_id:
        log=private_roulette_log.get(user_id, [])
    else:
        log=group_roulette_log.get(chat_id, [])

    if not log:
        await context.bot.send_message(chat_id=chat_id, text="–õ–æ–≥ –ø—É—Å—Ç–æ–π")
        return

    log_text="\n".join([entry.replace("–†—É–ª–µ—Ç–∫–∞: ", "")
                         for entry in log[-log_limit:]])

    await context.bot.send_message(
        chat_id=chat_id, text=log_text, parse_mode="Markdown"
    )


# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫–∏


async def show_bets(update: Update, context: CallbackContext):
    user_id=update.message.from_user.id
    chat_id=update.message.chat_id
    user_name=update.message.from_user.first_name

    if (user_id, chat_id) in user_bets and user_bets[(user_id, chat_id)]:
        bets=user_bets[(user_id, chat_id)]

        sorted_bets=sorted(
            bets.items(),
            key=lambda x: (
                0 if isinstance(x[0], int) else (1 if "-" in str(x[0]) else 2),
                x[0] if isinstance(x[0], int) else 0,
            ),
        )

        bet_text=""
        for bet, amount in sorted_bets:
            if bet == "–∫—Ä–∞—Å–Ω–æ–µ":
                bet="üî¥"
            elif bet == "—á—ë—Ä–Ω–æ–µ":
                bet="‚ö´Ô∏è"
            elif bet == "–∑–µ–ª—ë–Ω–æ–µ":
                bet="üü¢"
            bet_text += f"{amount} –Ω–∞ {bet}\n"

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∏ {user_name}:\n{bet_text}",
            parse_mode="Markdown",
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id, text=f"{user_name}, —É –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫."
        )


async def place_bet(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name
    text = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä—É–ª–µ—Ç–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if chat_id not in active_group_roulette:
        if chat_id == user_id:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
            await context.bot.send_message(
                chat_id=chat_id,
            )
            return
        else:  # –ì—Ä—É–ø–ø–∞
            await context.bot.send_message(
                chat_id=chat_id,
            )
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ä—É—Ç–∏—Ç—Å—è –ª–∏ —Ä—É–ª–µ—Ç–∫–∞
    if (user_id, chat_id) in user_spinning:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_balances.setdefault(user_id, 100000)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–≥–æ", "–∫—Ä—É—Ç–∏—Ç—å", "spin"
    if text in ["–≥–æ", "–∫—Ä—É—Ç–∏—Ç—å", "spin"]:
        if (user_id, chat_id) not in user_bets or not user_bets[(user_id, chat_id)]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"[{user_name}](tg://user?id={user_id}), —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É.",
                parse_mode='Markdown'
            )
            return

        # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–ø—É—Å–∫–æ–º —Ä—É–ª–µ—Ç–∫–∏
        user_spinning.add((user_id, chat_id))

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if chat_id in rules_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=rules_message_id[chat_id]
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            del rules_message_id[chat_id]

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞–≤–∫–∞—Ö
        for (bet_user_id, bet_chat_id) in list(user_bet_messages.keys()):
            if bet_chat_id == chat_id:
                for message_id in user_bet_messages[(bet_user_id, bet_chat_id)]:
                    try:
                        await context.bot.delete_message(
                            chat_id=chat_id,
                            message_id=message_id
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞–≤–∫–µ: {e}")
                del user_bet_messages[(bet_user_id, bet_chat_id)]

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
        asyncio.create_task(spin_roulette_task(user_id, chat_id, user_name, context, update))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
    bet_number_match = re.match(r"(\d+)\s+(0|[1-9]|1[0-2])$", text)
    bet_color_match = re.match(r"(\d+)\s+(–∫|—á)$", text)
    bet_range_match = re.match(r"(\d+)\s+(\d+)-(\d+)$", text)

    va_bank_number_match = re.match(r"(–≤–∞-–±–∞–Ω–∫|–≤–∞–±–∞–Ω–∫)\s+(0|[1-9]|1[0-2])$", text)
    va_bank_color_match = re.match(r"(–≤–∞-–±–∞–Ω–∫|–≤–∞–±–∞–Ω–∫)\s+(–∫|—á)$", text)
    va_bank_range_match = re.match(r"(–≤–∞-–±–∞–Ω–∫|–≤–∞–±–∞–Ω–∫)\s+(\d+)-(\d+)$", text)

    if bet_number_match:
        amount = int(bet_number_match.group(1))
        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {MIN_BET} –º–æ–Ω–µ—Ç."
            )
            return

        number = int(bet_number_match.group(2))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user_balances[user_id] < amount:
            await send_insufficient_funds(update, context, user_balances[user_id])
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        bets[number] = bets.get(number, 0) + amount
        user_balances[user_id] -= amount  # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {number}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif bet_color_match:
        amount = int(bet_color_match.group(1))
        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {MIN_BET} –º–æ–Ω–µ—Ç."
            )
            return

        color = "–∫—Ä–∞—Å–Ω–æ–µ" if "–∫" in bet_color_match.group(2) else "—á—ë—Ä–Ω–æ–µ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user_balances[user_id] < amount:
            await send_insufficient_funds(update, context, user_balances[user_id])
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        bets[color] = bets.get(color, 0) + amount
        user_balances[user_id] -= amount
        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {color}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif bet_range_match:
        amount = int(bet_range_match.group(1))
        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {MIN_BET} –º–æ–Ω–µ—Ç."
            )
            return

        start = int(bet_range_match.group(2))
        end = int(bet_range_match.group(3))

        if start > end or start < 0 or end > 12:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user_balances[user_id] < amount:
            await send_insufficient_funds(update, context, user_balances[user_id])
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        range_key = f"{start}-{end}"
        bets[range_key] = bets.get(range_key, 0) + amount
        user_balances[user_id] -= amount

        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {range_key}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif va_bank_number_match:
        number = int(va_bank_number_match.group(2))
        amount = user_balances[user_id]

        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–º–∏–Ω–∏–º—É–º {MIN_BET})."
            )
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        bets[number] = bets.get(number, 0) + amount
        user_balances[user_id] = 0
        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {number}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif va_bank_range_match:
        start = int(va_bank_range_match.group(2))
        end = int(va_bank_range_match.group(3))
        amount = user_balances[user_id]

        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–º–∏–Ω–∏–º—É–º {MIN_BET})."
            )
            return

        if start > end or start < 0 or end > 12:
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        range_key = f"{start}-{end}"
        bets[range_key] = bets.get(range_key, 0) + amount
        user_balances[user_id] = 0

        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {range_key}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif va_bank_color_match:
        color = "–∫—Ä–∞—Å–Ω–æ–µ" if "–∫" in va_bank_color_match.group(2) else "—á—ë—Ä–Ω–æ–µ"
        amount = user_balances[user_id]

        if amount < MIN_BET:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user_name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–º–∏–Ω–∏–º—É–º {MIN_BET})."
            )
            return

        bets = user_bets.setdefault((user_id, chat_id), {})
        bets[color] = bets.get(color, 0) + amount
        user_balances[user_id] = 0
        bet_message = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: [{user_name}](tg://user?id={user_id}) {amount} –º–æ–Ω–µ—Ç –Ω–∞ {color}",
            parse_mode='Markdown'
        )
        user_bet_messages.setdefault((user_id, chat_id), []).append(bet_message.message_id)

    elif text in ["–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞"]:
        if (user_id, chat_id) in user_bets:
            bet_amount = sum(user_bets[(user_id, chat_id)].values())
            user_balances[user_id] += bet_amount
            del user_bets[(user_id, chat_id)]
            await context.bot.send_message(chat_id=chat_id, text=f"–°—Ç–∞–≤–∫–∏ {user_name} –æ—Ç–º–µ–Ω–µ–Ω—ã")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"{user_name}, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")

    elif text in ["—É–¥–≤–æ–∏—Ç—å", "–£–¥–≤–æ–∏—Ç—å"]:
        bets = user_bets.get((user_id, chat_id), {})
        if not bets:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è")
            return

        total_bet = sum(bets.values())
        if user_balances[user_id] < total_bet:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!")
            return

        for bet in bets:
            bets[bet] *= 2
        user_balances[user_id] -= total_bet

        bet_text = "\n".join([f"{amount} –Ω–∞ {bet}" for bet, amount in bets.items()])
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"[{user_name}](tg://user?id={user_id}) —É–¥–≤–æ–∏–ª(–∞) —Å—Ç–∞–≤–∫–∏:\n{bet_text}",
            parse_mode='Markdown'
        )

    elif text in ["–ø–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"]:
        await context.bot.send_message(chat_id=chat_id, text="–ö–æ–º–∞–Ω–¥–∞ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def send_insufficient_funds(
    update: Update, context: CallbackContext, balance: int
):
    user_name=update.message.from_user.first_name
    keyboard=[[InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=TOP_UP_LINK)]]
    reply_markup=InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=f"{user_name}, —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        reply_markup=reply_markup,
    )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è


def main():
    app = (
        ApplicationBuilder()
        .token(os.getenv("TELEGRAM_TOKEN"))  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        .build()
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("referal", get_referral_link))
    # –í–∞–∂–Ω–æ –≤—ã—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("Crystal_Money", crystal_money))
    app.add_handler(CommandHandler("Crystal_Limit", crystal_limit))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(
        MessageHandler(filters.Regex(r"^(–±|–ë|–±–∞–ª–∞–Ω—Å|–ë–∞–ª–∞–Ω—Å)$"), balance)
    )
    app.add_handler(MessageHandler(filters.Regex(r"^\+\d+$"), transfer_coins))
    app.add_handler(
        MessageHandler(
        filters.Text(
            ["üîó–†–µ—Ñ–µ—Ä–∞–ª—ã"]),
        referrals_handler))
    app.add_handler(MessageHandler(filters.Text(["!–±–æ—Ç —Å—Ç–æ–ø"]), bot_stop))
    app.add_handler(MessageHandler(filters.Regex(r"^(–ë–∞–Ω|–±–∞–Ω)$"), ban_user))
    app.add_handler(MessageHandler(filters.Regex(r"^(–ö–∏–∫|–∫–∏–∫)$"), kick_user))
    app.add_handler(
        MessageHandler(
        filters.Regex(r"^(—Ä—É–ª–µ—Ç–∫–∞|–†—É–ª–µ—Ç–∫–∞)$"),
        roulette))
    app.add_handler(
        MessageHandler(
        filters.Regex(r"^(–ª–æ–≥|–õ–æ–≥|!–ª–æ–≥|!–õ–æ–≥)$"),
        show_log))
    app.add_handler(
        MessageHandler(
        filters.Regex(r"^(—Å—Ç–∞–≤–∫–∏|–°—Ç–∞–≤–∫–∏)$"),
        show_bets))

    app.add_handler(
        MessageHandler(
            filters.Regex(r"(?i)^–±–∞–Ω–¥–∏—Ç(\s\d+)?$"),
            play_bandit))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—É—Ç–∞
    app.add_handler(
        MessageHandler(
        filters.Regex(r"^!![–ú–º]—É—Ç\s*\d*"),
        mute_user))
    app.add_handler(MessageHandler(filters.Regex(r"^!!—Å–Ω—è—Ç—å–º—É—Ç$"), unmute))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(show_profile, pattern="^profile_"))
    app.add_handler(
        CallbackQueryHandler(
        handle_bonus,
        pattern="^bonus_request$"))
    app.add_handler(CallbackQueryHandler(get_bonus, pattern="^get_bonus$"))

    # 1. –°–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º —Å—Ç—Ä–æ–≥–æ —Ü–∏—Ñ—Ä—ã (–¥–ª—è handle_user_input)
    app.add_handler(
        MessageHandler(
            # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–µ –∫–æ–º–∞–Ω–¥–∞
            filters.Regex(r"^\d+$") & ~filters.COMMAND,
            handle_user_input,
        )
    )

    app.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
    handle_user_id_input
    ), group=1)

    app.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND,
    place_bet
    ), group=2)

    app.add_handler(
        MessageHandler(
        filters.ALL,
        check_mute))  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()
